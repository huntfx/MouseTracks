name: Build Executable (on Release)

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  PYINSTALLER_VERSION: v6.11.1  # Match 'requirements-build-pyinstaller.txt'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions: write-all

    strategy:
      fail-fast: false
      matrix:
        # 32 bit python not included as PySide6 not compatible
        include:
          - platform: windows
            os: windows-latest
            architecture: x64
            upx_suffix: win64
            exe_suffix: .exe
          - platform: linux
            os: ubuntu-latest
            architecture: x64
            upx_suffix: amd64_linux
            exe_suffix: ''

    steps:
      - name: Checkout partial repository
        if: github.ref_type == 'tag'
        uses: actions/checkout@v4

      - name: Checkout full repository
        if: github.ref_type != 'tag'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11 ${{ matrix.architecture }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: ${{ matrix.architecture }}

      - name: Create virtual environment
        shell: bash
        run: python -m venv .venv

      - name: Create build folder
        shell: bash
        run: |
          rm -rf build
          mkdir build

      - name: Update components
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          python -m pip install --upgrade pip wheel
          deactivate

      - name: Build PyInstaller Bootloader
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi

          echo "--- Cloning PyInstaller ${{ env.PYINSTALLER_VERSION }} ---"
          git clone --branch ${{ env.PYINSTALLER_VERSION }} --depth 1 https://github.com/pyinstaller/pyinstaller.git build/pyinstaller

          echo "--- Building Bootloader ---"
          cd build/pyinstaller/bootloader
          python ./waf distclean all
          cd ../.. # Back to build directory
          cd .. # Back to root

          echo "--- Installing Custom PyInstaller from build directory ---"
          pip install ./build/pyinstaller
          deactivate

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi

          echo "--- Installing main requirements ---"
          python -m pip install --upgrade -r requirements.txt

          echo "--- Installing build requirements ---"
          python -m pip install --upgrade -r requirements-build-pyinstaller.txt
          deactivate

      - name: Get version details from tag
        if: github.ref_type == 'tag'
        shell: python
        run: |
          import os

          tag_name = os.environ['GITHUB_REF_NAME']  # eg. v2.0.0
          version = tag_name.lstrip('v')  # eg. 2.0.0

          print(f'Tag: {tag_name}')
          print(f'Version: {version}')

          with open(os.environ['GITHUB_ENV'], 'a') as fh_env:
            print(f'VERSION={version}', file=fh_env)

      - name: Get version details from file
        if: github.ref_type != 'tag'
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          python .github/scripts/get-version.py
          deactivate

      - name: Set dynamic executable name
        id: set_names
        shell: bash
        run: |
          # VERSION env var should be set by previous 'Get version' steps
          if [ -z "$VERSION" ]; then
            echo "::error::VERSION environment variable not set!"
            exit 1
          fi

          EXE_BASENAME="MouseTracks-${VERSION}-${{ matrix.platform }}-${{ matrix.architecture }}"
          FULL_EXE_NAME="${EXE_BASENAME}${{ matrix.exe_suffix }}"

          # Set environment variables for use in later steps of this job
          echo "EXE_BASENAME=${EXE_BASENAME}" >> $GITHUB_ENV
          echo "FULL_EXE_NAME=${FULL_EXE_NAME}" >> $GITHUB_ENV

          echo "exe_basename=${EXE_BASENAME}" >> $GITHUB_OUTPUT
          echo "full_exe_name=${FULL_EXE_NAME}" >> $GITHUB_OUTPUT

          echo "Executable basename: ${EXE_BASENAME}"
          echo "Full executable name: ${FULL_EXE_NAME}"

      - name: Create version.rc (Windows only)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          source .venv/Scripts/activate
          pyivf-make_version --outfile "build/version.rc" --version "${{ env.VERSION }}" --file-description "${{ env.EXE_BASENAME }}" --internal-name "MouseTracks" --legal-copyright "Peter Hunt" --original-filename "${{ env.FULL_EXE_NAME }}" --product-name "${{ env.EXE_BASENAME }}"
          deactivate

      - name: Install UPX
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            UPX_URL="https://github.com/upx/upx/releases/download/v5.0.1/upx-5.0.1-${{ matrix.upx_suffix }}.zip"
            curl -L -o upx.zip "$UPX_URL"
            unzip -o upx.zip -d upx_extracted
            echo "PATH=$(pwd)/upx_extracted/upx-5.0.1-${{ matrix.upx_suffix }};$PATH" >> $GITHUB_ENV
          else # Linux
            UPX_URL="https://github.com/upx/upx/releases/download/v5.0.1/upx-5.0.1-${{ matrix.upx_suffix }}.tar.xz"
            curl -L -o upx.tar.xz "$UPX_URL"
            tar -xf upx.tar.xz
            echo "PATH=$(pwd)/upx-5.0.1-${{ matrix.upx_suffix }}:$PATH" >> $GITHUB_ENV
          fi

      - name: Modify PyInstaller Spec File
        shell: python
        run: |
          import os
          with open('MouseTracks.spec', 'r') as f:
            content = f.read()
          with open('MouseTracks.spec', 'w') as f:
            f.write(content.replace('MouseTracks', os.environ['EXE_BASENAME']))

      - name: Build executable
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          pyinstaller MouseTracks.spec
          deactivate

      - name: Attach executable to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/${{ env.FULL_EXE_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.BUILD_TOKEN }}

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: MouseTracks-${{ env.VERSION }}-${{ matrix.platform }}-${{ matrix.architecture }}
          path: dist/${{ env.FULL_EXE_NAME }}
